define(['dart_sdk', 'packages/flutter/src/services/system_channels.dart', 'packages/image_picker_web/src/web_image_picker.dart', 'packages/image_picker_web/src/Models/Types.dart', 'packages/image_picker_web/src/extensions/file_extensions.dart', 'packages/flutter/src/widgets/widget_span.dart'], (function load__packages__image_picker_web__image_picker_web_dart(dart_sdk, packages__flutter__src__services__system_channels$46dart, packages__image_picker_web__src__web_image_picker$46dart, packages__image_picker_web__src__Models__Types$46dart, packages__image_picker_web__src__extensions__file_extensions$46dart, packages__flutter__src__widgets__widget_span$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const html = dart_sdk.html;
  const _internal = dart_sdk._internal;
  const _interceptors = dart_sdk._interceptors;
  const typed_data = dart_sdk.typed_data;
  const convert = dart_sdk.convert;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const platform_channel = packages__flutter__src__services__system_channels$46dart.src__services__platform_channel;
  const message_codecs = packages__flutter__src__services__system_channels$46dart.src__services__message_codecs;
  const message_codec = packages__flutter__src__services__system_channels$46dart.src__services__message_codec;
  const web_image_picker = packages__image_picker_web__src__web_image_picker$46dart.src__web_image_picker;
  const Types = packages__image_picker_web__src__Models__Types$46dart.src__Models__Types;
  const file_extensions = packages__image_picker_web__src__extensions__file_extensions$46dart.src__extensions__file_extensions;
  const image = packages__flutter__src__widgets__widget_span$46dart.src__widgets__image;
  const widget_inspector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__widget_inspector;
  var image_picker_web = Object.create(dart.library);
  var $readAsDataUrl = dartx.readAsDataUrl;
  var $onError = dartx.onError;
  var $map = dartx.map;
  var $removeEventListener = dartx.removeEventListener;
  var $onChange = dartx.onChange;
  var $addEventListener = dartx.addEventListener;
  var $append = dartx.append;
  var $isEmpty = dartx.isEmpty;
  var $first = dartx.first;
  var $multiple = dartx.multiple;
  var $accept = dartx.accept;
  var $files = dartx.files;
  var $add = dartx.add;
  var $toList = dartx.toList;
  var $_get = dartx._get;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    MapOfString$dynamic: () => (T.MapOfString$dynamic = dart.constFn(core.Map$(core.String, dart.dynamic)))(),
    MapNOfString$dynamic: () => (T.MapNOfString$dynamic = dart.constFn(dart.nullable(T.MapOfString$dynamic())))(),
    FutureOfMapNOfString$dynamic: () => (T.FutureOfMapNOfString$dynamic = dart.constFn(async.Future$(T.MapNOfString$dynamic())))(),
    MethodCallToFutureOfMapNOfString$dynamic: () => (T.MethodCallToFutureOfMapNOfString$dynamic = dart.constFn(dart.fnType(T.FutureOfMapNOfString$dynamic(), [message_codec.MethodCall])))(),
    ListOfFile: () => (T.ListOfFile = dart.constFn(core.List$(html.File)))(),
    ListNOfFile: () => (T.ListNOfFile = dart.constFn(dart.nullable(T.ListOfFile())))(),
    CompleterOfListNOfFile: () => (T.CompleterOfListNOfFile = dart.constFn(async.Completer$(T.ListNOfFile())))(),
    FutureOfFile: () => (T.FutureOfFile = dart.constFn(async.Future$(html.File)))(),
    FileToFutureOfFile: () => (T.FileToFutureOfFile = dart.constFn(dart.fnType(T.FutureOfFile(), [html.File])))(),
    ListOfFileTovoid: () => (T.ListOfFileTovoid = dart.constFn(dart.fnType(dart.void, [T.ListOfFile()])))(),
    EventTovoid: () => (T.EventTovoid = dart.constFn(dart.fnType(dart.void, [html.Event])))(),
    dynamicToNull: () => (T.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    FileN: () => (T.FileN = dart.constFn(dart.nullable(html.File)))(),
    _LocationL: () => (T._LocationL = dart.constFn(dart.legacy(widget_inspector._Location)))(),
    ObjectN: () => (T.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    JSArrayOfUint8List: () => (T.JSArrayOfUint8List = dart.constFn(_interceptors.JSArray$(typed_data.Uint8List)))(),
    Uint8ListToImage: () => (T.Uint8ListToImage = dart.constFn(dart.fnType(image.Image, [typed_data.Uint8List])))(),
    ListN: () => (T.ListN = dart.constFn(dart.nullable(core.List)))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C1() {
      return C[1] = dart.const({
        __proto__: message_codecs.StandardMessageCodec.prototype
      });
    },
    get C0() {
      return C[0] = dart.const({
        __proto__: message_codecs.StandardMethodCodec.prototype,
        [StandardMethodCodec_messageCodec]: C[1] || CT.C1
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: Types.ImageType.prototype,
        [_name]: "ImageType.file",
        index: 0
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: Types.ImageType.prototype,
        [_name]: "ImageType.bytes",
        index: 1
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "bytes",
        [_Location_column]: 29,
        [_Location_line]: 170,
        [_Location_file]: null
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "semanticLabel",
        [_Location_column]: 51,
        [_Location_line]: 170,
        [_Location_file]: null
      });
    },
    get C5() {
      return C[5] = dart.constList([C[6] || CT.C6, C[7] || CT.C7], T._LocationL());
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[5] || CT.C5,
        [_Location_name]: null,
        [_Location_column]: 22,
        [_Location_line]: 170,
        [_Location_file]: "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/image_picker_web-2.0.3+1/lib/image_picker_web.dart"
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: Types.ImageType.prototype,
        [_name]: "ImageType.widget",
        index: 2
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "bytes",
        [_Location_column]: 53,
        [_Location_line]: 220,
        [_Location_file]: null
      });
    },
    get C10() {
      return C[10] = dart.constList([C[11] || CT.C11], T._LocationL());
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[10] || CT.C10,
        [_Location_name]: null,
        [_Location_column]: 46,
        [_Location_line]: 220,
        [_Location_file]: "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/image_picker_web-2.0.3+1/lib/image_picker_web.dart"
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: Types.VideoType.prototype,
        [_name]: "VideoType.file",
        index: 0
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: Types.VideoType.prototype,
        [_name]: "VideoType.bytes",
        index: 1
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[0] || CT.C0,
        [MethodChannel_name]: "image_picker_web"
      });
    }
  }, false);
  var C = Array(15).fill(void 0);
  var I = [
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/image_picker_web-2.0.3+1/lib/image_picker_web.dart",
    "package:image_picker_web/image_picker_web.dart"
  ];
  var StandardMethodCodec_messageCodec = dart.privateName(message_codecs, "StandardMethodCodec.messageCodec");
  var _pickMultiFiles = dart.privateName(image_picker_web, "_pickMultiFiles");
  var _name = dart.privateName(Types, "_name");
  var _Location_parameterLocations = dart.privateName(widget_inspector, "_Location.parameterLocations");
  var _Location_name = dart.privateName(widget_inspector, "_Location.name");
  var _Location_column = dart.privateName(widget_inspector, "_Location.column");
  var _Location_line = dart.privateName(widget_inspector, "_Location.line");
  var _Location_file = dart.privateName(widget_inspector, "_Location.file");
  var MethodChannel__binaryMessenger = dart.privateName(platform_channel, "MethodChannel._binaryMessenger");
  var MethodChannel_codec = dart.privateName(platform_channel, "MethodChannel.codec");
  var MethodChannel_name = dart.privateName(platform_channel, "MethodChannel.name");
  image_picker_web.ImagePickerWeb = class ImagePickerWeb extends core.Object {
    static registerWith(registrar) {
      if (registrar == null) dart.nullFailed(I[0], 19, 38, "registrar");
      let channel = new platform_channel.MethodChannel.new("image_picker_web", C[0] || CT.C0, registrar);
      let instance = new web_image_picker.WebImagePicker.new();
      channel.setMethodCallHandler(dart.fn(call => {
        if (call == null) dart.nullFailed(I[0], 23, 35, "call");
        return async.async(T.MapNOfString$dynamic(), function*() {
          switch (call.method) {
            case "pickImage":
            {
              return instance.pickImage();
            }
            case "pickVideo":
            {
              return instance.pickVideo();
            }
            default:
            {
              dart.throw(new message_codec.MissingPluginException.new());
            }
          }
        });
      }, T.MethodCallToFutureOfMapNOfString$dynamic()));
    }
    static _pickFile(type) {
      if (type == null) dart.nullFailed(I[0], 37, 46, "type");
      return async.async(T.FileN(), function* _pickFile() {
        let completer = T.CompleterOfListNOfFile().new();
        let input = html.InputElement.as(html.FileUploadInputElement.new());
        input.accept = dart.str(type) + "/*";
        let changeEventTriggered = false;
        function changeEventListener(e) {
          if (e == null) dart.nullFailed(I[0], 43, 41, "e");
          if (changeEventTriggered) return;
          changeEventTriggered = true;
          let files = dart.nullCheck(input.files);
          let resultFuture = files[$map](T.FutureOfFile(), dart.fn(file => {
            if (file == null) dart.nullFailed(I[0], 48, 58, "file");
            return async.async(html.File, function*() {
              let reader = html.FileReader.new();
              reader[$readAsDataUrl](file);
              reader[$onError].listen(dart.bind(completer, 'completeError'));
              return file;
            });
          }, T.FileToFutureOfFile()));
          async.Future.wait(html.File, resultFuture).then(dart.void, dart.fn(results => {
            if (results == null) dart.nullFailed(I[0], 54, 39, "results");
            return completer.complete(results);
          }, T.ListOfFileTovoid()));
        }
        dart.fn(changeEventListener, T.EventTovoid());
        function cancelledEventListener(e) {
          if (e == null) dart.nullFailed(I[0], 59, 44, "e");
          html.window[$removeEventListener]("focus", cancelledEventListener);
          async.Future.delayed(new core.Duration.new({milliseconds: 500})).then(core.Null, dart.fn(value => {
            if (!changeEventTriggered) {
              changeEventTriggered = true;
              completer.complete(null);
            }
          }, T.dynamicToNull()));
        }
        dart.fn(cancelledEventListener, T.EventTovoid());
        input[$onChange].listen(changeEventListener);
        input[$addEventListener]("change", changeEventListener);
        html.window[$addEventListener]("focus", cancelledEventListener);
        input.click();
        dart.nullCheck(html.document.body)[$append](input);
        let results = (yield completer.future);
        if (results == null || dart.test(results[$isEmpty])) return null;
        return results[$first];
      });
    }
    [_pickMultiFiles](type) {
      if (type == null) dart.nullFailed(I[0], 90, 51, "type");
      return async.async(T.ListNOfFile(), function* _pickMultiFiles() {
        let completer = T.CompleterOfListNOfFile().new();
        let input = html.FileUploadInputElement.new();
        input[$multiple] = true;
        input[$accept] = dart.str(type) + "/*";
        let changeEventTriggered = false;
        function changeEventListener(e) {
          if (e == null) dart.nullFailed(I[0], 97, 41, "e");
          if (changeEventTriggered) return;
          changeEventTriggered = true;
          let files = dart.nullCheck(input[$files]);
          let resultsFutures = files[$map](T.FutureOfFile(), dart.fn(file => {
            if (file == null) dart.nullFailed(I[0], 102, 60, "file");
            return async.async(html.File, function*() {
              let reader = html.FileReader.new();
              reader[$readAsDataUrl](file);
              reader[$onError].listen(dart.bind(completer, 'completeError'));
              return file;
            });
          }, T.FileToFutureOfFile()));
          async.Future.wait(html.File, resultsFutures).then(dart.void, dart.fn(results => {
            if (results == null) dart.nullFailed(I[0], 109, 18, "results");
            return completer.complete(results);
          }, T.ListOfFileTovoid()));
        }
        dart.fn(changeEventListener, T.EventTovoid());
        function cancelledEventListener(e) {
          if (e == null) dart.nullFailed(I[0], 114, 44, "e");
          html.window[$removeEventListener]("focus", cancelledEventListener);
          async.Future.delayed(new core.Duration.new({milliseconds: 500})).then(core.Null, dart.fn(value => {
            if (!changeEventTriggered) {
              changeEventTriggered = true;
              completer.complete(null);
            }
          }, T.dynamicToNull()));
        }
        dart.fn(cancelledEventListener, T.EventTovoid());
        input[$onChange].listen(changeEventListener);
        input[$addEventListener]("change", changeEventListener);
        html.window[$addEventListener]("focus", cancelledEventListener);
        input.click();
        dart.nullCheck(html.document.body)[$append](input);
        let results = (yield completer.future);
        if (results == null || dart.test(results[$isEmpty])) return null;
        return results;
      });
    }
    static getImage(opts) {
      let outputType = opts && 'outputType' in opts ? opts.outputType : null;
      if (outputType == null) dart.nullFailed(I[0], 157, 55, "outputType");
      return async.async(T.ObjectN(), function* getImage() {
        if (!Types.ImageType.is(outputType)) {
          dart.throw(new core.ArgumentError.new("outputType has to be from Type: ImageType if you call getImage()"));
        }
        let file = (yield image_picker_web.ImagePickerWeb._pickFile("image"));
        if (file == null) return null;
        switch (outputType) {
          case C[2] || CT.C2:
          {
            return file;
          }
          case C[3] || CT.C3:
          {
            return file_extensions['FileModifier|asBytes'](file);
          }
          case C[8] || CT.C8:
          {
            return new image.Image.memory(yield file_extensions['FileModifier|asBytes'](file), {semanticLabel: file.name, $creationLocationd_0dea112b090073317d4: C[4] || CT.C4});
          }
          default:
          {
            dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
          }
        }
      });
    }
    static get getImageInfo() {
      return async.async(Types.MediaInfo, function* getImageInfo() {
        let data = (yield image_picker_web.ImagePickerWeb._methodChannel.invokeMapMethod(core.String, dart.dynamic, "pickImage"));
        return Types.MediaInfo.fromJson(dart.nullCheck(data));
      });
    }
    static getMultiImages(opts) {
      let outputType = opts && 'outputType' in opts ? opts.outputType : null;
      if (outputType == null) dart.nullFailed(I[0], 198, 59, "outputType");
      return async.async(T.ListN(), function* getMultiImages() {
        if (!Types.ImageType.is(outputType)) {
          dart.throw(new core.ArgumentError.new("outputType has to be from Type: ImageType if you call getImage()"));
        }
        let images = (yield new image_picker_web.ImagePickerWeb.new()[_pickMultiFiles]("image"));
        if (images == null) return null;
        switch (outputType) {
          case C[2] || CT.C2:
          {
            return images;
          }
          case C[3] || CT.C3:
          {
            let files = T.JSArrayOfUint8List().of([]);
            for (let img of images) {
              files[$add](yield file_extensions['FileModifier|asBytes'](img));
            }
            return dart.test(files[$isEmpty]) ? null : files;
          }
          case C[8] || CT.C8:
          {
            let files = T.JSArrayOfUint8List().of([]);
            for (let img of images) {
              files[$add](yield file_extensions['FileModifier|asBytes'](img));
            }
            if (dart.test(files[$isEmpty])) return null;
            return files[$map](image.Image, dart.fn(e => {
              if (e == null) dart.nullFailed(I[0], 220, 34, "e");
              return new image.Image.memory(e, {$creationLocationd_0dea112b090073317d4: C[9] || CT.C9});
            }, T.Uint8ListToImage()))[$toList]();
          }
          default:
          {
            return null;
          }
        }
      });
    }
    static getVideo(opts) {
      let outputType = opts && 'outputType' in opts ? opts.outputType : null;
      if (outputType == null) dart.nullFailed(I[0], 237, 55, "outputType");
      return async.async(dart.dynamic, function* getVideo() {
        switch (outputType) {
          case C[12] || CT.C12:
          {
            return image_picker_web.ImagePickerWeb._pickFile("video");
          }
          case C[13] || CT.C13:
          {
            let data = (yield image_picker_web.ImagePickerWeb._methodChannel.invokeMapMethod(core.String, dart.dynamic, "pickVideo"));
            let imageData = convert.base64.decode(core.String.as(dart.nullCheck(data)[$_get]("data")));
            return imageData;
          }
          default:
          {
            return null;
          }
        }
      });
    }
    static get getVideoInfo() {
      return async.async(Types.MediaInfo, function* getVideoInfo() {
        let data = (yield image_picker_web.ImagePickerWeb._methodChannel.invokeMapMethod(core.String, dart.dynamic, "pickVideo"));
        return Types.MediaInfo.fromJson(dart.nullCheck(data));
      });
    }
  };
  (image_picker_web.ImagePickerWeb.new = function() {
    ;
  }).prototype = image_picker_web.ImagePickerWeb.prototype;
  dart.addTypeTests(image_picker_web.ImagePickerWeb);
  dart.addTypeCaches(image_picker_web.ImagePickerWeb);
  dart.setMethodSignature(image_picker_web.ImagePickerWeb, () => ({
    __proto__: dart.getMethods(image_picker_web.ImagePickerWeb.__proto__),
    [_pickMultiFiles]: dart.fnType(async.Future$(dart.nullable(core.List$(html.File))), [core.String])
  }));
  dart.setLibraryUri(image_picker_web.ImagePickerWeb, I[1]);
  dart.defineLazy(image_picker_web.ImagePickerWeb, {
    /*image_picker_web.ImagePickerWeb._methodChannel*/get _methodChannel() {
      return C[14] || CT.C14;
    }
  }, false);
  dart.trackLibraries("packages/image_picker_web/image_picker_web.dart", {
    "package:image_picker_web/image_picker_web.dart": image_picker_web
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["image_picker_web.dart"],"names":[],"mappings":"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","file":"../../../../../../../packages/image_picker_web/image_picker_web.dart.lib.js"}');
  // Exports:
  return {
    image_picker_web: image_picker_web
  };
}));

//# sourceMappingURL=image_picker_web.dart.lib.js.map
